#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Setup-skript f√∂r Longevity Receptgenerator.
Detta skript hj√§lper dig att konfigurera och testa projektet.
"""

import os
import sys
import shutil
import webbrowser
import subprocess
import time
from pathlib import Path

def create_env_file():
    """Skapar en .env-fil om den inte redan finns"""
    env_path = Path('.env')
    env_example_path = Path('env.example')
    
    if env_path.exists():
        print("‚úÖ .env-fil finns redan")
    else:
        if env_example_path.exists():
            shutil.copy(env_example_path, env_path)
            print("‚úÖ .env-fil skapad fr√•n env.example")
            print("‚ö†Ô∏è  Gl√∂m inte att uppdatera .env-filen med din OpenAI API-nyckel!")
        else:
            # Skapa en ny .env-fil fr√•n grunden
            with open(env_path, 'w', encoding='utf-8') as f:
                f.write("# API-nycklar\n")
                f.write("OPENAI_API_KEY=din_openai_api_nyckel_h√§r\n\n")
                f.write("# Server-konfiguration\n")
                f.write("PORT=8000\n")
            print("‚úÖ .env-fil skapad")
            print("‚ö†Ô∏è  Gl√∂m inte att uppdatera .env-filen med din OpenAI API-nyckel!")

def check_api_key():
    """Kontrollerar om OpenAI API-nyckeln √§r satt"""
    env_path = Path('.env')
    if not env_path.exists():
        return False
    
    with open(env_path, 'r', encoding='utf-8') as f:
        for line in f:
            if line.startswith('OPENAI_API_KEY='):
                key = line.strip().split('=', 1)[1]
                if key and key != 'din_openai_api_nyckel_h√§r':
                    return True
    return False

def create_test_files():
    """Skapar testfiler f√∂r att testa API:et"""
    # Skapa en mapp f√∂r testfiler om den inte finns
    test_dir = Path('testdata')
    test_dir.mkdir(exist_ok=True)
    
    # Skapa en exempelfil med ingredienser
    ingredients_path = test_dir / 'ingredienser.txt'
    if not ingredients_path.exists():
        with open(ingredients_path, 'w', encoding='utf-8') as f:
            f.write("""Lax
Quinoa
Gr√∂nk√•l
Rucola
K√∂rsb√§rstomater
Gurka
R√∂dl√∂k
Fetaost
Kalamataoliver
Valn√∂tter
Citron
Vitl√∂k
Honungsmelon
Bl√•b√§r
Havregryn
Mandelmj√∂lk
Mandlar
Chiafr√∂n
Linfr√∂olja
√Ñgg
Mor√∂tter
Broccoli
Spenat
Svarta b√∂nor
Kik√§rtor
Fullkornsris
R√∂da linser
Tofu
Avokado
Zucchini
""")
        print(f"‚úÖ Testfil skapad: {ingredients_path}")
    else:
        print(f"‚úÖ Testfil finns redan: {ingredients_path}")

def install_dependencies():
    """Installerar projektets beroenden"""
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], check=True)
        print("‚úÖ Beroenden installerade")
    except subprocess.CalledProcessError:
        print("‚ùå Fel vid installation av beroenden")
        return False
    return True

def check_environment():
    """Kontrollerar om milj√∂n √§r korrekt konfigurerad"""
    # Kontrollera att Python √§r installerat
    print(f"Python-version: {sys.version}")
    
    # Kontrollera att pip √§r installerat
    try:
        subprocess.run([sys.executable, '-m', 'pip', '--version'], check=True, capture_output=True)
        print("‚úÖ pip √§r installerat")
    except subprocess.CalledProcessError:
        print("‚ùå pip √§r inte installerat")
        return False
    
    return True

def start_services():
    """Startar API-servern och webbservern"""
    print("\nüöÄ Startar tj√§nsterna...")
    
    # Starta API-servern i en separat process
    api_process = subprocess.Popen([sys.executable, 'api.py'], 
                                  stdout=subprocess.PIPE, 
                                  stderr=subprocess.PIPE,
                                  text=True)
    
    # V√§nta lite f√∂r att API-servern ska starta
    print("‚è≥ V√§ntar p√• att API-servern ska starta...")
    time.sleep(3)
    
    # Kontrollera om API-servern startade korrekt
    if api_process.poll() is not None:
        print("‚ùå API-servern kunde inte startas")
        stdout, stderr = api_process.communicate()
        print(f"Fel: {stderr}")
        return
    
    print("‚úÖ API-server startad p√• http://localhost:8000")
    
    # Starta webbservern
    print("üåê √ñppnar webbl√§saren...")
    webbrowser.open('http://localhost:8000/docs')  # √ñppna API-dokumentationen
    
    # V√§nta lite till innan vi √∂ppnar frontend
    time.sleep(2)
    
    # Starta frontend-servern och √∂ppna webbl√§saren
    subprocess.Popen([sys.executable, 'serve.py'])
    
    print("\n‚ú® Alla tj√§nster startade! Du kan nu anv√§nda Longevity Receptgenerator.")
    print("üìä API-dokumentation: http://localhost:8000/docs")
    print("üñ•Ô∏è  Frontend: http://localhost:8080")
    print("\nTryck Ctrl+C f√∂r att avsluta")
    
    try:
        # H√•ll processen vid liv tills anv√§ndaren trycker Ctrl+C
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüõë Avslutar tj√§nsterna...")
        api_process.terminate()
        print("‚úÖ Tj√§nsterna avslutade")

def main():
    """Huvudfunktion"""
    print("\nüçΩÔ∏è  Longevity Receptgenerator - Setup üçΩÔ∏è\n")
    
    # Kontrollera milj√∂n
    if not check_environment():
        print("‚ùå Milj√∂n √§r inte korrekt konfigurerad")
        return
    
    # Skapa .env-fil
    create_env_file()
    
    # Installera beroenden
    if not install_dependencies():
        return
    
    # Skapa testfiler
    create_test_files()
    
    # Kontrollera API-nyckel
    if not check_api_key():
        print("\n‚ö†Ô∏è  OpenAI API-nyckeln √§r inte konfigurerad.")
        print("√ñppna .env-filen och l√§gg till din API-nyckel:")
        print("OPENAI_API_KEY=sk-din-api-nyckel-h√§r")
        
        choice = input("\nVill du konfigurera API-nyckeln nu? (j/n): ")
        if choice.lower() in ('j', 'ja', 'y', 'yes'):
            api_key = input("Ange din OpenAI API-nyckel: ")
            with open('.env', 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            with open('.env', 'w', encoding='utf-8') as f:
                for line in lines:
                    if line.startswith('OPENAI_API_KEY='):
                        f.write(f'OPENAI_API_KEY={api_key}\n')
                    else:
                        f.write(line)
            print("‚úÖ API-nyckel konfigurerad")
        else:
            print("\n‚ö†Ô∏è  Du m√•ste konfigurera API-nyckeln innan du kan anv√§nda API:et")
            return
    
    print("\n‚úÖ Konfiguration slutf√∂rd")
    
    # Fr√•ga om anv√§ndaren vill starta tj√§nsterna
    choice = input("\nVill du starta API-servern och webbservern nu? (j/n): ")
    if choice.lower() in ('j', 'ja', 'y', 'yes'):
        start_services()

if __name__ == "__main__":
    main() 