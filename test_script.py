#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Test-skript f√∂r att testa Longevity Receptgeneratorn direkt fr√•n kommandoraden.
Detta √§r ett enkelt s√§tt att testa API:et utan att beh√∂va starta webbservern.

Anv√§ndning:
    python test_script.py [textfil] [bildfil]

Exempel:
    python test_script.py ingredienser.txt
    python test_script.py "" kylskap.jpg
"""

import os
import sys
import base64
import requests
from dotenv import load_dotenv
import json

# Ladda milj√∂variabler
load_dotenv()

# Kontrollera om OpenAI API-nyckeln √§r satt
if not os.getenv("OPENAI_API_KEY"):
    print("\n‚ö†Ô∏è  OPENAI_API_KEY saknas! Skapa en .env-fil med din API-nyckel.")
    print("Exempel:")
    print("OPENAI_API_KEY=sk-din-api-nyckel-h√§r\n")
    sys.exit(1)

def test_with_text_file(filename):
    """Testa API:et med en textfil som inneh√•ller ingredienser"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            ingredients = f.read()
        
        print(f"\nüìù L√§ser ingredienser fr√•n filen: {filename}")
        print(f"Ingredienser: {ingredients[:100]}...\n")
        
        # Anropa OpenAI-API:et direkt
        import openai
        openai.api_key = os.getenv("OPENAI_API_KEY")
        
        prompt = f"""
Nedan finns en lista √∂ver tillg√§ngliga varor. Skriv ett recept med fokus p√• "Longevity" (l√•ngt liv) som √§r:
- Sv√•righetsgrad: medel
- M√•ltid: middag
- Antal personer: 2
- F√∂redraget k√∂k/stilriktning: 
- Kostpreferenser: 

Receptet ska inneh√•lla ingredienser som √§r k√§nda f√∂r att fr√§mja ett l√•ngt och h√§lsosamt liv, som till exempel:
- Baljv√§xter (b√∂nor, linser)
- Fullkorn
- N√∂tter och fr√∂n
- B√§r och f√§rska frukter
- Gr√∂na bladgr√∂nsaker
- Fisk rik p√• omega-3 (om inte vegetariskt/veganskt)
- Fermenterade livsmedel
- Olivolja och andra h√§lsosamma fetter

Struktur f√∂r svaret:
1) F√∂rslag p√• r√§tt:
   - En kort kommentar om vad r√§tten heter, vilket land/ursprung den har, och varf√∂r den √§r bra f√∂r ett l√•ngt liv.

2) G√∂r s√•h√§r:
   - En mycket kortfattad beskrivning av hur man tillagar r√§tten.

3) Ingredienser du har:
   - Ange vilka av de tillg√§ngliga varorna som anv√§nds och hur mycket.

4) Har du?:
   - Lista eventuella sm√•ingredienser (salt, peppar, tomatpur√© etc.) som inte √§r avg√∂rande f√∂r r√§tten.

5) Longevity-f√∂rdelar:
   - En kort f√∂rklaring om hur ingredienserna i r√§tten bidrar till ett l√•ngt och h√§lsosamt liv.

Ditt svar ska vara p√• svenska.

Lista √∂ver tillg√§ngliga varor:
{ingredients}
"""
        
        print("üîÑ Genererar recept, v√§nta...")
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        
        recipe = response["choices"][0]["message"]["content"]
        
        print("\n‚úÖ Recept genererat!\n")
        print("-" * 80)
        print(recipe)
        print("-" * 80)
        
    except Exception as e:
        print(f"\n‚ùå Fel vid generering av recept: {e}")

def test_with_image(filename):
    """Testa API:et med en bild p√• kylsk√•pet"""
    try:
        with open(filename, 'rb') as f:
            image_data = f.read()
        
        print(f"\nüñºÔ∏è  Analyserar bild fr√•n filen: {filename}")
        
        # Konvertera bilddata till base64
        base64_image = base64.b64encode(image_data).decode('utf-8')
        
        # Anropa OpenAI-API:et direkt
        import openai
        openai.api_key = os.getenv("OPENAI_API_KEY")
        
        print("üîç Analyserar bilden, v√§nta...")
        image_analysis = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text", 
                            "text": "Detta √§r en bild av mitt kylsk√•p. Lista alla ingredienser och r√•varor du kan identifiera i bilden. Var specifik och detaljerad. Lista r√•varorna p√• svenska."
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}"
                            }
                        }
                    ]
                }
            ]
        )
        
        ingredients = image_analysis["choices"][0]["message"]["content"]
        
        print(f"\nüß™ Identifierade ingredienser: {ingredients[:100]}...\n")
        
        # Generera recept baserat p√• identifierade ingredienser
        prompt = f"""
Nedan finns en lista √∂ver tillg√§ngliga varor. Skriv ett recept med fokus p√• "Longevity" (l√•ngt liv) som √§r:
- Sv√•righetsgrad: medel
- M√•ltid: middag
- Antal personer: 2
- F√∂redraget k√∂k/stilriktning: 
- Kostpreferenser: 

Receptet ska inneh√•lla ingredienser som √§r k√§nda f√∂r att fr√§mja ett l√•ngt och h√§lsosamt liv, som till exempel:
- Baljv√§xter (b√∂nor, linser)
- Fullkorn
- N√∂tter och fr√∂n
- B√§r och f√§rska frukter
- Gr√∂na bladgr√∂nsaker
- Fisk rik p√• omega-3 (om inte vegetariskt/veganskt)
- Fermenterade livsmedel
- Olivolja och andra h√§lsosamma fetter

Struktur f√∂r svaret:
1) F√∂rslag p√• r√§tt:
   - En kort kommentar om vad r√§tten heter, vilket land/ursprung den har, och varf√∂r den √§r bra f√∂r ett l√•ngt liv.

2) G√∂r s√•h√§r:
   - En mycket kortfattad beskrivning av hur man tillagar r√§tten.

3) Ingredienser du har:
   - Ange vilka av de tillg√§ngliga varorna som anv√§nds och hur mycket.

4) Har du?:
   - Lista eventuella sm√•ingredienser (salt, peppar, tomatpur√© etc.) som inte √§r avg√∂rande f√∂r r√§tten.

5) Longevity-f√∂rdelar:
   - En kort f√∂rklaring om hur ingredienserna i r√§tten bidrar till ett l√•ngt och h√§lsosamt liv.

Ditt svar ska vara p√• svenska.

Lista √∂ver tillg√§ngliga varor:
{ingredients}
"""
        
        print("üîÑ Genererar recept, v√§nta...")
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        
        recipe = response["choices"][0]["message"]["content"]
        
        print("\n‚úÖ Recept genererat!\n")
        print("-" * 80)
        print(recipe)
        print("-" * 80)
        
    except Exception as e:
        print(f"\n‚ùå Fel vid generering av recept: {e}")

def main():
    """Huvudfunktion"""
    print("\nüçΩÔ∏è  Longevity Receptgenerator - Testskript üçΩÔ∏è\n")
    
    # Kontrollera att det finns minst ett argument
    if len(sys.argv) < 2:
        print("Anv√§ndning:")
        print("  python test_script.py [textfil] [bildfil]")
        print("\nExempel:")
        print("  python test_script.py ingredienser.txt")
        print("  python test_script.py \"\" kylskap.jpg\n")
        return
    
    # Hantera textfil
    if len(sys.argv) >= 2 and sys.argv[1]:
        test_with_text_file(sys.argv[1])
    
    # Hantera bildfil
    if len(sys.argv) >= 3 and sys.argv[2]:
        test_with_image(sys.argv[2])

if __name__ == "__main__":
    main() 