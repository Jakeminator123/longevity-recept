#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Ett all-in-one skript f√∂r Longevity Receptgenerator.
Detta skript kombinerar b√•de backend-API och frontend-server i en enda fil
f√∂r att g√∂ra det enkelt att starta hela applikationen med ett enda kommando.

Anv√§ndning:
    python all_in_one.py

Detta startar b√•de API-servern och webbservern och √∂ppnar webbl√§saren automatiskt.
"""

import os
import sys
import time
import threading
import webbrowser
import multiprocessing
import http.server
import socketserver
from pathlib import Path
from typing import Optional
from dotenv import load_dotenv

# --------------------------------------------------------
# Konfigurera milj√∂
# --------------------------------------------------------

# Ladda milj√∂variabler
load_dotenv()

# Konfigurera portar
API_PORT = int(os.getenv("PORT", 8000))
WEB_PORT = 8080

# Kontrollera att OpenAI API-nyckeln √§r satt
if not os.getenv("OPENAI_API_KEY"):
    print("\n‚ö†Ô∏è OPENAI_API_KEY saknas! Skapa en .env-fil med din API-nyckel.")
    print("Exempel:")
    print("OPENAI_API_KEY=sk-din-api-nyckel-h√§r\n")
    
    # F√∂rs√∂k automatiskt skapa .env-fil fr√•n env.example
    env_example_path = Path('env.example')
    env_path = Path('.env')
    
    if env_example_path.exists() and not env_path.exists():
        import shutil
        shutil.copy(env_example_path, env_path)
        print("‚úÖ .env-fil skapad fr√•n env.example")
        print("‚ö†Ô∏è √ñppna .env-filen och l√§gg till din OpenAI API-nyckel\n")
    
    choice = input("Vill du forts√§tta √§nd√•? Vissa funktioner kommer inte att fungera. (j/n): ")
    if choice.lower() not in ('j', 'ja', 'y', 'yes'):
        sys.exit(1)

# --------------------------------------------------------
# API-server (backend)
# --------------------------------------------------------

def start_api_server():
    """Starta FastAPI-servern f√∂r backend"""
    try:
        # Importera n√∂dv√§ndiga bibliotek f√∂r API-servern
        import base64
        from fastapi import FastAPI, File, Form, UploadFile, HTTPException
        from fastapi.middleware.cors import CORSMiddleware
        import uvicorn
        import openai
    except ImportError:
        print("‚ùå N√∂dv√§ndiga bibliotek saknas f√∂r API-servern. K√∂r 'pip install -r requirements.txt'")
        sys.exit(1)
    
    # Skapa FastAPI-appen
    app = FastAPI(title="Longevity Recept API")
    
    # Konfigurera CORS f√∂r att till√•ta f√∂rfr√•gningar fr√•n frontend
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Konfigurera OpenAI API-nyckel
    openai.api_key = os.getenv("OPENAI_API_KEY")
    
    # Hemstartsida
    @app.get("/")
    async def root():
        return {"message": "V√§lkommen till Longevity Recept API"}
    
    # API-slutpunkt f√∂r att generera recept
    @app.post("/generate")
    async def generate_recipe(
        choice: str = Form(...),
        file: UploadFile = File(...),
        difficulty: str = Form(...),
        meal_type: str = Form(...),
        num_people: str = Form(...),
        cuisine_pref: Optional[str] = Form(""),
        dietary_pref: Optional[str] = Form(""),
    ):
        try:
            # L√§s filinneh√•ll
            varulista = ""
            file_content = await file.read()
            
            # Behandla baserat p√• val
            if choice == "1":  # Textfil med inventarielista
                try:
                    varulista = file_content.decode("utf-8")
                except UnicodeDecodeError:
                    raise HTTPException(status_code=400, detail="Filen √§r inte en giltig textfil")
                    
            elif choice == "2":  # Bild p√• kylsk√•p
                # Kontrollera att API-nyckeln √§r satt
                if not openai.api_key:
                    raise HTTPException(status_code=500, detail="OpenAI API-nyckel saknas")
                
                # Konvertera bilddata till base64
                base64_image = base64.b64encode(file_content).decode('utf-8')
                
                # Analysera bild med OpenAI
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[
                        {
                            "role": "user",
                            "content": "Detta √§r en bild av mitt kylsk√•p. Lista alla ingredienser och r√•varor du kan identifiera i bilden. Var specifik och detaljerad. Lista r√•varorna p√• svenska."
                        }
                    ],
                    image=base64_image
                )
                
                # Extrahera listan med r√•varor fr√•n svaret
                varulista = response["choices"][0]["message"]["content"]
            
            else:
                raise HTTPException(status_code=400, detail="Ogiltigt val")

            # Skapa prompt med anv√§ndarinmatning
            prompt = f"""
Nedan finns en lista √∂ver tillg√§ngliga varor. Skriv ett recept med fokus p√• "Longevity" (l√•ngt liv) som √§r:
- Sv√•righetsgrad: {difficulty}
- M√•ltid: {meal_type}
- Antal personer: {num_people}
- F√∂redraget k√∂k/stilriktning: {cuisine_pref}
- Kostpreferenser: {dietary_pref}

Receptet ska inneh√•lla ingredienser som √§r k√§nda f√∂r att fr√§mja ett l√•ngt och h√§lsosamt liv, som till exempel:
- Baljv√§xter (b√∂nor, linser)
- Fullkorn
- N√∂tter och fr√∂n
- B√§r och f√§rska frukter
- Gr√∂na bladgr√∂nsaker
- Fisk rik p√• omega-3 (om inte vegetariskt/veganskt)
- Fermenterade livsmedel
- Olivolja och andra h√§lsosamma fetter

Struktur f√∂r svaret:
1) F√∂rslag p√• r√§tt:
   - En kort kommentar om vad r√§tten heter, vilket land/ursprung den har, och varf√∂r den √§r bra f√∂r ett l√•ngt liv.

2) G√∂r s√•h√§r:
   - En mycket kortfattad beskrivning av hur man tillagar r√§tten.

3) Ingredienser du har:
   - Ange vilka av de tillg√§ngliga varorna som anv√§nds och hur mycket.

4) Har du?:
   - Lista eventuella sm√•ingredienser (salt, peppar, tomatpur√© etc.) som inte √§r avg√∂rande f√∂r r√§tten.

5) Longevity-f√∂rdelar:
   - En kort f√∂rklaring om hur ingredienserna i r√§tten bidrar till ett l√•ngt och h√§lsosamt liv.

Ditt svar ska vara p√• svenska.

Lista √∂ver tillg√§ngliga varor:
{varulista}
"""

            # Skicka fr√•gan till modellen
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}]
            )

            # H√§mta och returnera svaret
            recipe = response["choices"][0]["message"]["content"]
            
            return {"recipe": recipe}
            
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))
    
    # Starta API-servern
    print(f"üöÄ Startar API-server p√• http://localhost:{API_PORT}...")
    uvicorn.run(app, host="0.0.0.0", port=API_PORT)

# --------------------------------------------------------
# Webbserver (frontend)
# --------------------------------------------------------

def start_web_server():
    """Starta en enkel HTTP-server f√∂r frontend"""
    # Skapa en enkel HTTP-server
    handler = http.server.SimpleHTTPRequestHandler
    
    try:
        with socketserver.TCPServer(("", WEB_PORT), handler) as httpd:
            print(f"üåê Webbserver ig√•ng p√• http://localhost:{WEB_PORT}")
            httpd.serve_forever()
    except OSError as e:
        if e.errno == 98:  # Port anv√§nds redan
            print(f"‚ùå Port {WEB_PORT} anv√§nds redan. V√§lj en annan port.")
        else:
            print(f"‚ùå Fel vid start av webbserver: {e}")
        sys.exit(1)

def open_browser():
    """√ñppna webbl√§saren efter en kort f√∂rdr√∂jning"""
    time.sleep(2)  # V√§nta lite s√• att servern hinner starta
    print("üîç √ñppnar webbl√§sare...")
    webbrowser.open(f"http://localhost:{WEB_PORT}/preview.html")

# --------------------------------------------------------
# Huvudprogram
# --------------------------------------------------------

def main():
    """Huvudfunktion"""
    print("\nüçΩÔ∏è  Longevity Receptgenerator - All-in-One üçΩÔ∏è\n")
    
    # Kontrollera att API-servern kan startas
    try:
        import fastapi
        import uvicorn
    except ImportError:
        print("‚ùå FastAPI och/eller uvicorn saknas. Installera beroenden med:")
        print("pip install -r requirements.txt")
        sys.exit(1)
    
    # Starta webbservern i en separat tr√•d
    web_server_thread = threading.Thread(target=start_web_server)
    web_server_thread.daemon = True
    web_server_thread.start()
    
    # √ñppna webbl√§saren i en separat tr√•d
    browser_thread = threading.Thread(target=open_browser)
    browser_thread.daemon = True
    browser_thread.start()
    
    # Starta API-servern i huvudtr√•den (kommer att blockera)
    start_api_server()

if __name__ == "__main__":
    # Anv√§nd multiprocessing f√∂r att hantera CTRL+C korrekt
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë Avslutar Longevity Receptgenerator...")
        sys.exit(0) 